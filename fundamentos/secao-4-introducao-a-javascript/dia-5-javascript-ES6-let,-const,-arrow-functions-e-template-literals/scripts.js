
/*
// ğŸš€ Modifique a variÃ¡vel para que respeite o escopo onde estÃ¡ sendo declarada. Lembre-se: para que a variÃ¡vel respeite o escopo, ela nÃ£o deve ser acessÃ­vel fora do escopo em que esteja sendo declarada.

function imprimeIdade() {
  for (let idade = 30; idade <= 40; idade += 1) {
    console.log('Idade dentro do for:', idade)
  }
}
imprimeIdade()

// ğŸš€ Altere o valor das propriedades do objeto, para que respeite as caracterÃ­sticas da variÃ¡vel do tipo const;

const pessoa = {
  nome: 'Henri',
  idade: 20
}

pessoa.nome = 'Luna';
pessoa.idade = 19;
console.log('Nome:', pessoa.nome);
console.log('Idade:', pessoa.idade);

// ğŸš€ Modifique a variÃ¡vel para que nÃ£o ocorra Erro;

let favoriteFood = 'Lasanha';
favoriteFood = 'Hamburguer';
console.log(favoriteFood);

// ğŸš€ Modifique as concatenaÃ§Ãµes para template literals.

const name = 'Adriana';
const lastName = 'Soares';
console.log(`OlÃ¡, ${name} ${lastName}!`);
function soma(a,b) {
  let resultado = a + b;
  return resultado;
}
let a = 3;
let b = 5;
console.log(`O resultado da soma de ${a} + ${b} Ã©: ${soma(a, b)}`);

// ğŸš€ Modifique a estrutura das funÃ§Ãµes a seguir para que elas sejam arrow functions;
// ğŸš€ Transforme a funÃ§Ã£o numeroAleatorio em uma arrow function;

const numeroAleatorio = () => Math.random()
console.log(numeroAleatorio());

// ğŸš€ Transforme a funÃ§Ã£o hello em uma arrow function;

const hello = (nome) => `OlÃ¡, ${nome}!`
console.log(hello('Vitor'));

// ğŸš€ Transforme a funÃ§Ã£o nomeCompleto em uma arrow function;

const nomeCompleto = (nome, sobrenome) => `${nome} ${sobrenome}`
let nome = 'Ivan';
let sobrenome = 'Pires';
console.log(nomeCompleto(nome, sobrenome));

// ğŸš€ Altere a expressÃ£o if/else utilizando ternary operator;

let speed = 90;
const speedCar = (speed) => speed >= 120 ? `VocÃª ultrapassou o limite de velocidade` : `VocÃª estÃ¡ na velocidade permitida`;
console.log(speedCar(speed));

// Crie uma funÃ§Ã£o que ligue e desligue um motor de um carro.

const statusMotor = false;

const ligarDesligar = () => statusMotor == true ? `O motor estÃ¡ ligado` : `O motor estÃ¡ desligado`;

console.log(ligarDesligar());

// ğŸš€ Crie uma funÃ§Ã£o que calcule a Ã¡rea de um cÃ­rculo.

const circleArea = (raio) => {
  const pi = 3.14;
  let area = pi * (raio ** 2);
  return area;
}

console.log(circleArea(5));

// ğŸš€ Crie uma funÃ§Ã£o que receba uma frase como parÃ¢metro e retorne a maior palavra da frase.

const longestWord = string => {
  let arraySplit = string.split(' ');
  let majorWord = '';
  let result = '';

  for (const word of arraySplit) {   //Estudar mais for in e of
    if (word.length > majorWord) {
      majorWord = word.length;
      result = word;
    }
  }

  return result
}

console.log(longestWord('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu'));


// ğŸš€-------------ğŸš€ TESTES PLAYGROUND FUNCTIONS ğŸš€--------------ğŸš€

// 1.Crie uma funÃ§Ã£o usando o operador &&

const compareTrue = (boolean1, boolean2) => {
  if (boolean1 == true && boolean2 == true) {
    return true;
  } else {
    return false;
  }
}

console.log(compareTrue(false, false));

// 2.Crie uma funÃ§Ã£o que divida uma frase

const splitSentense = string => {
  const splitString = string.split(' ');
  return splitString;
}

console.log(splitSentense('vamo que vamo'));

// 3.Crie uma funÃ§Ã£o que use concatenaÃ§Ã£o de string

const concatName = (array) => {
  const firstName = array[0];
  const lastName = array[array.length - 1];
  let result = `${lastName}, ${firstName}`;
  return result;
}

console.log(concatName(['foguete', 'nÃ£o', 'tem', 'rÃ©',]));

// 4.Crie uma funÃ§Ã£o que calcula a quantidade de pontos de um campeonato de futebol

const footballPoints = (victorys, ties) => {
  const victorysCalc = victorys * 3;
  const result = victorysCalc + ties;
  return `${result} pontos`;
}

console.log(footballPoints(14, 8));

// 5.Crie uma funÃ§Ã£o que calcula o nÃºmero de repetiÃ§Ãµes do maior nÃºmero

const higuestCount = (array) => {
  let higherNumber = 0;
  let repetitions = 0;
  
  for (let index = 0; index < array.length; index += 1) {
    const element = array[index];

    if (element > higherNumber) {
      higherNumber = element;
    }   
  }

  const arrayOrder = array.sort();
  for (const key in arrayOrder) {
    if (arrayOrder[key] === higherNumber) {
      repetitions += 1;
    }
  }

  return repetitions;
}

console.log(higuestCount([0,4,4,4,9,2,1,]));

// 6.Crie 3 funÃ§Ãµes para calcular as Ã¡reas de um triÃ¢ngulo e de um retÃ¢ngulo

const calcTriangleArea = (base, height) => (base * height) / 2;

const calcRetangleArea = (base, height) => base * height;

const calcAllAreas = (base, height, form) => {
  let triangle = 0;
  let retangle = 0;

  if (form == 'triÃ¢ngulo') {
    triangle = calcTriangleArea(base, height);
    return `O valor da Ã¡rea do triÃ¢ngulo Ã© de: ${triangle}`
  } else if (form == 'retÃ¢ngulo') {
    retangle = calcRetangleArea(base, height);
    return `O valor da area do retÃ¢ngulo Ã© de: ${retangle}`
  } else {
    return 'NÃ£o foi possÃ­vel fazer o calculo, insÃ­ra uma forma geomÃ©trica vÃ¡lida'
  }
}

console.log(calcAllAreas(10, 50, 'quadrado'));

// 7.Crie uma funÃ§Ã£o de caÃ§a ao rato

const catAndMouse = (mouse, cat1, cat2) => {
  catOne = mouse - cat1;
  catTwo = mouse - cat2;

  if (catOne < catTwo) {
    return 'cat1';
  } else if (catTwo < catOne) {
    return 'cat2';
  } else if (catOne == catTwo) {
    return 'Os gatos trombam e o rato foge'
  }
}

console.log(catAndMouse(20, 8, 8));
*/
// Crie uma funÃ§Ã£o FizzBuzz